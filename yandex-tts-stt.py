# yandex_tts_stt.py

import requests
import json
import time
import os
import datetime
import jwt
import boto3
from botocore.client import Config
from dotenv import load_dotenv
from colorama import Fore, Style, init

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
FOLDER_ID = os.getenv('FOLDER_ID')
IAM_ENDPOINT = 'https://iam.api.cloud.yandex.net/iam/v1/tokens'
TTS_URL = 'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize'
STT_URL = 'https://transcribe.api.cloud.yandex.net/speech/stt/v2/longRunningRecognize'
OPERATION_URL = 'https://operation.api.cloud.yandex.net/operations/'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IAM-—Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
def get_iam_token_from_sa_key():
    try:
        with open('service_account_key.json') as infile:
            key_data = json.load(infile)
    except FileNotFoundError:
        print(f"{Fore.RED}‚ö†Ô∏è  –§–∞–π–ª service_account_key.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    except json.JSONDecodeError:
        print(f"{Fore.RED}‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ service_account_key.json.")
        return None

    service_account_id = key_data['service_account_id']
    key_id = key_data['id']
    private_key_raw = key_data['private_key']

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ PEM-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞
    private_key_lines = private_key_raw.split('\n')
    pem_start = '-----BEGIN PRIVATE KEY-----'
    pem_end = '-----END PRIVATE KEY-----'

    try:
        start_index = private_key_lines.index(pem_start)
        end_index = private_key_lines.index(pem_end)
        pem_lines = private_key_lines[start_index:end_index + 1]
        private_key = '\n'.join(pem_lines) + '\n'
    except ValueError:
        print(f"{Fore.RED}‚ö†Ô∏è  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞.")
        return None

    now = datetime.datetime.now(datetime.timezone.utc)

    payload = {
        'aud': IAM_ENDPOINT,
        'iss': service_account_id,
        'iat': int(now.timestamp()),
        'exp': int((now + datetime.timedelta(minutes=1)).timestamp()),
    }

    additional_headers = {
        'kid': key_id,
    }

    try:
        encoded_jwt = jwt.encode(
            payload,
            private_key,
            algorithm='PS256',
            headers=additional_headers,
        )
    except Exception as e:
        print(f"{Fore.RED}‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ JWT: {e}")
        return None

    headers = {
        'Content-Type': 'application/json',
    }

    data = {
        'jwt': encoded_jwt
    }

    response = requests.post(IAM_ENDPOINT, headers=headers, json=data)

    if response.status_code == 200:
        iam_token = response.json()['iamToken']
        print(f"{Fore.GREEN}‚úÖ  IAM-—Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
        return iam_token
    else:
        print(f"{Fore.RED}‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IAM-—Ç–æ–∫–µ–Ω–∞: {response.text}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
def synthesize_text(iam_token, text, output_audio_file='output.ogg'):
    headers = {
        'Authorization': f'Bearer {iam_token}',
        'Content-Type': 'application/x-www-form-urlencoded',
    }
    data = {
        'text': text,
        'lang': 'ru-RU',
        'voice': 'oksana',
        'speed': '1.0',
        'format': 'oggopus',
        'folderId': FOLDER_ID,
    }

    response = requests.post(TTS_URL, headers=headers, data=data)

    if response.status_code == 200:
        with open(output_audio_file, 'wb') as f:
            f.write(response.content)
        print(f"{Fore.GREEN}‚úÖ  –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_audio_file}")
        return output_audio_file
    else:
        print(f"{Fore.RED}‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏:")
        print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤ Object Storage –∏ –ø–æ–ª—É—á–µ–Ω–∏—è URI
def upload_audio_to_object_storage(audio_file):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    ACCESS_KEY = os.getenv('AWS_ACCESS_KEY_ID')
    SECRET_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    BUCKET_NAME = os.getenv('BUCKET_NAME')

    if not ACCESS_KEY or not SECRET_KEY or not BUCKET_NAME:
        print(f"{Fore.RED}‚ö†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ACCESS_KEY, SECRET_KEY –∏ BUCKET_NAME –≤ —Ñ–∞–π–ª–µ .env")
        return None

    s3 = boto3.client(
        's3',
        endpoint_url='https://storage.yandexcloud.net',
        aws_access_key_id=ACCESS_KEY,
        aws_secret_access_key=SECRET_KEY,
        config=Config(signature_version='s3v4'),
        region_name='ru-central1',
    )

    try:
        s3.upload_file(audio_file, BUCKET_NAME, audio_file)
        print(f"{Fore.GREEN}‚úÖ  –ê—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Object Storage.")
    except Exception as e:
        print(f"{Fore.RED}‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}")
        return None

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
    try:
        audio_uri = s3.generate_presigned_url(
            ClientMethod='get_object',
            Params={
                'Bucket': BUCKET_NAME,
                'Key': audio_file,
            },
            ExpiresIn=3600,  # –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å
        )
        print(f"{Fore.GREEN}‚úÖ  –ü–æ–ª—É—á–µ–Ω URI –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.")
        return audio_uri
    except Exception as e:
        print(f"{Fore.RED}‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URI: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
def recognize_speech_long_running(iam_token, audio_uri):
    headers = {
        'Authorization': f'Bearer {iam_token}',
        'Content-Type': 'application/json',
    }

    data = {
        "folderId": FOLDER_ID,
        "config": {
            "specification": {
                "languageCode": "ru-RU",
                "audioEncoding": "OGG_OPUS",
                "enableWordTimeOffsets": True,
            }
        },
        "audio": {
            "uri": audio_uri
        }
    }

    response = requests.post(STT_URL, headers=headers, json=data)

    if response.status_code == 200:
        operation_id = response.json().get('id')
        print(f"{Fore.GREEN}üìù –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —Å ID: {operation_id}")
        return operation_id
    else:
        print(f"{Fore.RED}‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏:")
        print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
def get_recognition_result(iam_token, operation_id):
    headers = {
        'Authorization': f'Bearer {iam_token}',
        'Content-Type': 'application/json',
    }
    while True:
        response = requests.get(f'{OPERATION_URL}{operation_id}', headers=headers)
        if response.status_code == 200:
            result = response.json()
            if result.get('done', False):
                if 'response' in result:
                    print(f"{Fore.GREEN}üéâ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                    return result['response']['chunks']
                else:
                    print(f"{Fore.RED}‚ö†Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π: {result}")
                    return None
            else:
                print(f"{Fore.CYAN}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏...")
                time.sleep(5)
        else:
            print(f"{Fore.RED}‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
            print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return None

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ IAM-—Ç–æ–∫–µ–Ω–∞
    iam_token = get_iam_token_from_sa_key()

    if iam_token:
        # –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
        text = "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?"

        # –®–∞–≥ 1: –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
        audio_file = synthesize_text(iam_token, text)

        if audio_file:
            # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ URI
            audio_uri = upload_audio_to_object_storage(audio_file)

            if audio_uri:
                # –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
                operation_id = recognize_speech_long_running(iam_token, audio_uri)

                if operation_id:
                    # –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                    recognition_result = get_recognition_result(iam_token, operation_id)

                    if recognition_result:
                        for chunk in recognition_result:
                            alternatives = chunk.get('alternatives', [])
                            for alternative in alternatives:
                                words = alternative.get('words', [])
                                for word_info in words:
                                    word = word_info['word']
                                    start_time = word_info['startTime']
                                    end_time = word_info['endTime']
                                    print(f"{Fore.GREEN}üó£Ô∏è {word}: –Ω–∞—á–∞–ª–æ {start_time}, –∫–æ–Ω–µ—Ü {end_time}")

if __name__ == '__main__':
    main()
